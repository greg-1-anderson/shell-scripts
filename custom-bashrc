#!/bin/bash

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

# Use 'sed $INPLACE' for cross-platform 'sed -i'.
INPLACE="-i"
if [ "$OS" == "Darwin" ]
then
  INPLACE="-i ''"
fi

# Incude our private stuff, if the file exists
PRIVATE_BASHRC="$HOME/Code/personal/config/private-bashrc.rc"
if [ -f "$PRIVATE_BASHRC" ]
then
  source "$PRIVATE_BASHRC"
fi

# Require THREE ^D characters in a row to exit
export IGNOREEOF=2

# Prevent Control-S from freezing terminal output
tty -s && stty stop undef

export UNISH_TMP=$HOME/tmp/drush-tmp
mkdir -p $UNISH_TMP
export UNISH_NO_TIMEOUTS=1

# Make 'bat' (like 'cat' with syntax hilitig) look right on light terminals
export BAT_THEME=GitHub

# Locale settings For chef:
# https://github.com/berkshelf/berkshelf-api/issues/112#issuecomment-71907310
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export RUBYOPTS="-E utf-8"

OS="$(uname -s)"

# Detect external keyboard
if ioreg -p IOUSB | grep -q 'USB Gaming Keyboard' ; then
  # Remap tilda / backtick key for external keyboard.
  # NOTE: This changes tilda / backtick to the wrong characters on the built-in keyboard
  hidutil property --set '{"UserKeyMapping":
      [{"HIDKeyboardModifierMappingSrc":0x700000035,
        "HIDKeyboardModifierMappingDst":0x700000064},
       {"HIDKeyboardModifierMappingSrc":0x700000064,
        "HIDKeyboardModifierMappingDst":0x700000035}]
  }' > /dev/null
else
  # Restore tilda / backtick key
  hidutil property --set '{"UserKeyMapping":
      [{"HIDKeyboardModifierMappingSrc":0x700000035,
        "HIDKeyboardModifierMappingDst":0x700000035},
       {"HIDKeyboardModifierMappingSrc":0x700000064,
        "HIDKeyboardModifierMappingDst":0x700000064}]
  }' > /dev/null
fi

# Bash completion. Requires bash-completion. c.f. base-brew-install script.
# Many of these scripts fail with syntax errors, even after upgrading
# bash; however, others work well, so we will just ignore errors.
if [ "$OS" == "Darwin" ] && [ -f $(brew --prefix)/etc/bash_completion ]; then
  . $(brew --prefix)/etc/bash_completion 2>/dev/null
fi
if [ -f /etc/bash_completion ]; then
  . /etc/bash_completion 2>/dev/null
fi

#
# Some aliases and functions that Greg likes:
#
alias please='sudo'
alias sbrc='source $HOME/.bashrc'
alias lla='ls -A -l --si'
alias ll='ls -l --si'
alias la='ls -A'
alias l='ls -CF'
alias f="find . -type f \! -path '*/.git/*'  \! -path '*/vendor/*'"
alias fj='find . -name "*.java"'
alias fppt='find . -name "*.ppt"'
alias fxls='find . -name "*.xls"'
alias portscan='nmap -sT -O'
alias openports='portscan localhost'
alias rmrej='rm `find . -name "*.rej"` `find -name "*.orig"`'
alias rot13='tr a-zA-Z n-za-mN-ZA-M'
alias findtabs="find -not -regex '..*/\..*' -exec grep -HP '\t' {} \;"
alias dr=drush
alias randstr='LC_ALL=C tr -dc "AHJ-NP-Za-km-np-z2-9" </dev/urandom | head -c 64 ; echo'
alias short='LC_ALL=C tr -dc "a-km-np-z" </dev/urandom | head -c 8 ; echo'
alias se='subl'

# Run a web server with Python. See: http://www.linuxjournal.com/content/tech-tip-really-simple-http-server-python
alias pyserve='python -m SimpleHTTPServer'
alias pyserver=pyserve

# Run a web server with php
alias phpserve='php -S 127.0.0.1:8001'
alias phpserver=phpserve

# Switch php version
function php-switch() {
  if [ -n "$(ls /usr/local/Cellar/php*/$1* 2>/dev/null)" ] ; then
    brew unlink php
    brew link "php@$1"
  else
    echo "php $1 not installed."
    echo
    echo "Available versions:"
    # 'brew list --versions php' doesn't quite do the trick for me (only shows one version)
    find /usr/local/Cellar/php* -type d -maxdepth 1 -print | sed -e 's#/usr/local/Cellar/php[^/]*/*##' | grep '^[0-9.]\+$'
  fi
}

if [ "$OS" == "Darwin" ] ; then
  alias ssh-copy-id='ssh-copy-id.sh'
fi

function tolower() { tr A-Z a-z <<<$@; }
function mcd() { mkdir -p "$1" && cd "$1"; }

# Thanks to:
# http://stackoverflow.com/questions/141599/how-do-you-get-a-list-of-changes-from-a-subversion-repository-by-date-range
# http://stackoverflow.com/questions/2693173/log-of-svn-activity-for-a-certain-user
function lastweek() {
  svn log "$1" -r {$(date --date="Monday last week" "+%F")}:{$(date --date="Sunday last week" "+%F")} | filter-log-by-user "$2"
}

# Create a .pem from a .p12
function p12topem {
  openssl pkcs12 -in $HOME/certs/employee.p12 -out $HOME/certs/employee.crt.pem -clcerts -nokeys
  openssl pkcs12 -in $HOME/certs/employee.p12 -out $HOME/certs/employee.key.pem -nocerts -nodes
  cat $HOME/certs/employee.crt.pem $HOME/certs/employee.key.pem > $HOME/certs/employee.pem
}

function filter-log-by-user {
  if [ -n "$1" ] ; then
    who="$1"
  elif [ -n "$SVNUSER" ] ; then
    who="$SVNUSER"
  else
    who="$(whoami)"
  fi
  sed -n "/| $SVNUSER |/,/-----\$/ p"
}

# Only useful on the corporate intranet.  Prerequisites:
#   sudo mkdir /mnt/public
#   sudo apt-get install cifs-utils
alias mount-public='sudo mount -t cifs -o user=ganderson //samba/public /mnt/public'

function fingerprints() {
  path="$1"
  if [ -z "$path" ]; then
    path="$HOME/.ssh/authorized_keys"
  fi
  local file="$path"
  while read l; do
    [[ -n $l && ${l###} = $l ]] && ssh-keygen -l -f /dev/stdin <<<$l
  done < $file
}

source $SCRIPT_DIR/prompt.sh

# Assume that we will use vi
export EDITOR=vi

# Exit here if there is no DISPLAY
#[ -z "$DISPLAY" ] && return

# Set the editor to 'se' if it is available
s=`which sublime_text 2>/dev/null`
s2=`which se 2>/dev/null`
if [ -n "$s" ] && [ -n "$s2" ] ; then
  export EDITOR='se -w'
fi

#
# If drush is in the $PATH, then source the
# example bashrc it provides.
#
d=`which drush 2>/dev/null`
if [ -n "$d" ] ; then
  # If the file found is a symlink, resolve to the actual file
  d2=`readlink $d`
  # Get the directory that drush is stored in.
  # d2 might be relative or absolute path.
  if [ "x${d2:0:1}" == "x/" ] ; then
    d=$(dirname "$d2")
  else
    d=$(dirname $(dirname "$d")"/$d2")
  fi
  if [ -f "$d/examples/example.bashrc" ] ; then
    . "$d/examples/example.bashrc"
    # Add aliases for standard bash commands
    if [ -n "`type -t cddl`" ] ; then
      alias cd='cddl'
    fi
    if [ -n "`type -t lsd`" ] ; then
      alias ls='lsd'
    fi
    if [ -n "`type -t cpd`" ] ; then
      alias cp='cpd'
    fi
    if [ -n "`type -t dssh`" ] ; then
      alias ssh='dssh'
    fi
    if [ -n "`type -t gitd`" ] ; then
      alias git='gitd'
    fi
  fi
fi
